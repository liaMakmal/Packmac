IDEAL
MODEL small

STACK 100h
DATASEG
	x dw 1 dup (145, 146, 147, 148, 149, 150, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 145, 146, 147, 148, 149, 150)
	y dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)
	color dw 165 dup (14)	
	copyX dw 1 dup (145, 146, 147, 148, 149, 150, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 145, 146, 147, 148, 149, 150)
	copyY dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)

	XcorrectDiraction dw 1 dup (145, 146, 147, 148, 149, 150, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 145, 146, 147, 148, 149, 150)
	YcorrectDiraction dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)
	colorcorrectDiraction dw 165 dup (14)	
	copyXcorrectDiraction dw 1 dup (145, 146, 147, 148, 149, 150, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 145, 146, 147, 148, 149, 150)
	copyYcorrectDiraction dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)


	xDown dw 1 dup (140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154)
	yDown dw 1 dup (85, 86, 87, 88, 89, 90, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 80, 81, 82, 83, 84, 85, 86, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 85, 86, 87, 88, 89, 90)
	colorT dw 165 dup (14)	
	copyxDown dw 1 dup (140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154)
	copyyDown dw 1 dup (85, 86, 87, 88, 89, 90, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 80, 81, 82, 83, 84, 85, 86, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 85, 86, 87, 88, 89, 90)
	
	xUp dw 1 dup (143, 144, 150, 151, 142, 143, 144, 150, 151, 152, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 143, 144, 145, 146, 147, 148, 149, 150, 151, 145, 146, 147, 148, 149)
	yUp dw 1 dup (80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94)
	copyxUp dw 1 dup (143, 144, 150, 151, 142, 143, 144, 150, 151, 152, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 143, 144, 145, 146, 147, 148, 149, 150, 151, 145, 146, 147, 148, 149)
	copyyUp dw 1 dup (80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94)


	xleft dw 1 dup (144, 145, 146, 147, 148, 149, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 148, 149, 150, 151, 152, 153, 154, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 144, 145, 146, 147, 148, 149)
	yleft dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)
	copyxleft dw 1 dup (144, 145, 146, 147, 148, 149, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 148, 149, 150, 151, 152, 153, 154, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 144, 145, 146, 147, 148, 149)
	copyyleft dw 1 dup (80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94)


	upColliderX dw 1 dup (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14) 
	upColliderY dw 1 dup (-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1) 
	
	upColliderXoffset dw 15 dup(?)
	upColliderYoffset dw 15 dup(?)
	
	startingScreenMessage db " ", 10, 10, "Your goal is collect as many", 10,10,  "points as you can",10,  " ",10, "before the ghost eats you",10,  " ",10, "For every dot you collect," , 10,  " ",10, "you get 1 point",10,  " ",10, "to win you need to eat all the points $"
	endingScreenMessage db  " ", 10, 10, "You were pretty bad, shall we try again?  $"
	winScreenMessage db " ", 10, 10, "very good, you win! $"

	pacmanBlack dw 165 dup (0)
	PacmanXoffset dw 165 dup (?)
	PacmanYoffset dw 165 dup (?)
	 
	xoffset dw -15
	yoffset dw -17
	
	xoffsetNum dw (?)
	yoffsetNum dw (?)
	
	xRedGhost dw 1 dup  (56, 57, 58, 54, 55, 56, 57, 58, 59, 60, 53, 54, 55, 56, 57, 58, 59, 60, 61, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 51, 52, 54, 55, 58, 59, 60, 62, 63, 51, 55, 58, 59, 63)
	yRedGhost dw 1 dup (42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55)
	colorRedGhost dw 1 dup (12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,31,31,12,12,12,31,31,12,12,12,31,31,54,54,12,31,31,54,54,12,12,31,31,54,54,12,31,31,54,54,12,12,12,31,31,31,31,12,31,31,31,31,12,12,12,12,12,31,31,12,12,12,31,31,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12)
	xRedGhostOffset dw 144 dup (?) 
	yRedGhostOffset dw 144 dup (?) 
	xRedGhostOffsetTotal dw 0
	yRedGhostOffsetTotal dw 0
	xRedGhostOffsetNum dw 1
	yRedGhostOffsetNum dw 0
	counterRed db 0
	
	xPinkGhost dw 1 dup(36, 37, 38, 34, 35, 36, 37, 38, 39, 40, 33, 34, 35, 36, 37, 38, 39, 40, 41, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 32, 34, 35, 38, 39, 40, 42, 43, 31, 35, 38, 39, 43)
	;(106, 107, 108, 104, 105, 106, 107, 108, 109, 110, 103, 104, 105, 106, 107, 108, 109, 110, 111, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 101, 102, 104, 105, 108, 109, 110, 112, 113, 101, 105, 108, 109, 113)
  
	yPinkGhost dw 1 dup (100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113)
	;(42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55)

	colorPinkGhost dw 1 dup (60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,31,31,60,60,60,31,31,60,60,60,31,31,54,54,60,31,31,54,54,60,60,31,31,54,54,60,31,31,54,54,60,60,60,31,31,31,31,60,31,31,31,31,60,60,60,60,60,31,31,60,60,60,31,31,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60)
	xPinkGhostOffset dw 144 dup (?) 
	yPinkGhostOffset dw 144 dup (?) 
	xPinkGhostOffsetTotal dw 0
	yPinkGhostOffsetTotal dw 0
	xPinkGhostOffsetNum dw 1
	yPinkGhostOffsetNum dw 0
	counterPink db 0


xOrangeGhost dw 1 dup (26, 27, 28, 24, 25, 26, 27, 28, 29, 30, 23, 24, 25, 26, 27, 28, 29, 30, 31, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 24, 25, 28, 29, 30, 32, 33, 21, 25, 28, 29, 33)


	yOrangeGhost dw 1 dup (100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113)
	colorOrangeGhost dw 1 dup (43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,31,31,43,43,43,31,31,43,43,43,31,31,54,54,43,31,31,54,54,43,43,31,31,54,54,43,31,31,54,54,43,43,43,31,31,31,31,43,31,31,31,31,43,43,43,43,43,31,31,43,43,43,31,31,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43)

	xOrangeGhostOffset dw 144 dup (?) 
	yOrangeGhostOffset dw 144 dup (?) 
	xOrangeGhostOffsetTotal dw 0
	yOrangeGhostOffsetTotal dw 0
	xOrangeGhostOffsetNum dw 1
	yOrangeGhostOffsetNum dw 0
	counterOrange db 0


	xBlueGhost dw 1 dup(96, 97, 98, 94, 95, 96, 97, 98, 99, 100, 93, 94, 95, 96, 97, 98, 99, 100, 101, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 92, 94, 95, 98, 99, 100, 102, 103, 91, 95, 98, 99, 103)
	yBlueGhost dw 1 dup (171, 171, 171, 172, 172, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184)
	colorBlueGhost dw 1 dup (11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,31,31,11,11,11,31,31,11,11,11,31,31,54,54,11,31,31,54,54,11,11,31,31,54,54,11,31,31,54,54,11,11,11,31,31,31,31,11,31,31,31,31,11,11,11,11,11,31,31,11,11,11,31,31,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11)
	xBlueGhostOffset dw 144 dup (?) 
	yBlueGhostOffset dw 144 dup (?) 
	xBlueGhostOffsetTotal dw 0
	yBlueGhostOffsetTotal dw 0
	xBlueGhostOffsetNum dw 1
	yBlueGhostOffsetNum dw 0
	counterBlue db 0
	
	collide dw 0
	
	xDot dw 1 dup (22, 32, 42, 52, 62, 72, 82, 92, 102, 115, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 245, 22, 64, 115, 142, 202, 245, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 245, 22, 32, 42, 52, 62, 102, 112, 122, 132, 142, 152, 162, 202, 212, 222, 232, 245, 62, 202, 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 , 172, 182, 192, 202, 212, 222, 232, 245, 22 , 67 , 87, 177 , 197, 245, 22 , 32 , 42 , 52 , 67 , 87 , 102, 112, 122, 132, 142, 152, 162, 177, 197, 222, 232, 245, 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 , 102, 112, 122, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 245, 22 , 32 , 42 , 52 , 112, 122, 132, 142, 152, 202, 212, 222, 245, 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 , 102, 112, 122, 132, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 245)
	yDot dw 1 dup (23, 23, 23, 23, 23, 23, 23, 23, 23 ,  23,  23, 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 33, 33, 33 , 33 , 33 , 33 , 49, 49, 49, 49, 49, 49, 49, 49, 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 49 , 69, 69, 69, 69, 69, 79 , 79 , 79 , 79 , 79 , 79 , 79 , 69 , 69 , 69 , 69 , 69 , 85, 85 , 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 118, 118, 118, 118, 118, 118, 133, 133, 133, 133, 133, 133, 128, 128, 128, 128, 128, 128, 128, 133, 133, 133, 133, 133, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176)  
	colorDot dw 167 dup (15)
	
	loseText1 db " ", 10, 10 ,'Your Score Was:$'
	loseText2 db 10,'Do You Want To Play Again?',10,10,10,13,'        Y-Yes                N-No$'  
	
ogoText db ?

db ' _____                                   ',13,10 
db ' |  __ \                                 ',13,10 
db ' | |_) | _    ___ _ __ ___   __ _ _ __   ',13,10 
db ' |  ___/ _` |/ __|  _ ` _ \ / _` |  _  \ ',13,10 
db ' | |  | (_| | (__| | | | | | (_| | | | | ',13,10 
db ' |_|   \__,_|\___|_| |_| |_|\__,_|_| |_| ',13,10 
db '                                         $',13,10 

           
lostLogo db ?      

db '                       _           _     ',13,10
db '                       | |         | |    ',13,10
db '  _   _  ___  _   _    | | ___  __ | |   ',13,10
db ' | | | |/ _ \| | | |   | |/ _ \/ __| __|  ',13,10
db '  | || | (_) | |_| |   | | (_) \_  \ |_   ',13,10
db '  \__, |\___/ \__,_|   |_|\___/|___/\__|  ',13,10
db '   __/ |                                  ',13,10
db '  |___/                                   $',13,10


winLogo db ? 

db '                                _         ',13,10
db '                                (_)        ',13,10
db '  _   _  ___  _   _    __      ___ _ __  ',13,10
db ' | | | |/ _ \| | | |   \ \ /\ / / |  _ \ ',13,10
db ' | |_| | (_) | |_| |    \ V  V /| | | | | ',13,10
db '  \__, |\___/ \__,_|     \_/\_/ |_|_| |_|',13,10
db '   __/ |                                    ',13,10
db '  |___ /                                    $',13,10


finalScore db 0
Score db '0000',13,10,'$'

;--------------------------------------------------------------------------------------------------------------------------------
CODESEG


proc startScreen
	mov dx, offset ogoText
	mov ah,09h
	int 21h
	
	mov dx, offset startingScreenMessage
	mov ah,09h
	int 21h
	mov ah,0
	int 16h
	ret
endp startScreen

proc endGame
	mov dx, offset lostLogo
	mov ah,09h
	int 21h
	
	mov dx, offset endingScreenMessage
	mov ah,09h
	int 21h
	mov ah,0
	int 16h
	ret
endp endGame

; fill screen with color
proc fillScreen
	push bp
	mov bp, sp
	push ax
	push cx
	push dx
	mov ax, [bp+4]
	mov ah, 0Ch
	mov cx, 320
	mov dx, 200

	rows:
	columns:
	int 10h
	loop columns
	dec dx
	cmp dx, 0
	jne rows

	pop dx
	pop cx
	pop ax
	pop bp
	ret 2
endp fillScreen
	
	
	;5 inputs fills a rectengular area with the color
	;1. x of first corner
	;2. y of first corner
	;3. x of second corner
	;4. y of second corner
	;5. color   

proc FillArea
	push ax
	push bx
	push cx
	push dx
	push bp
	mov bp, sp
	mov al,[bp+12]
	mov cx,200
	Area1:
		push cx
		dec cx
		cmp cx, [bp+18]
		jg yGreater
		cmp cx, [bp+14]
		jge yCorrect
		jmp yIncorrect
	yGreater:
		je yCorrect
		cmp cx,[bp+14]
		jle yCorrect
		jmp yIncorrect
	yCorrect:
		mov dx, cx
		mov cx, 320
		Area2:
			push cx
			dec cx
			cmp cx, [bp+20]
			je xCorrect
			jg xGreater
			cmp cx, [bp+16]
			jge xCorrect
			jmp xIncorrect
		xGreater:
			je xCorrect
			cmp cx,[bp+16]
			jle xCorrect
			jmp xIncorrect
		xCorrect:
			mov ah, 0Ch
			int 10h
		xIncorrect:
			pop cx
			loop Area2
	yIncorrect:
		pop cx
		loop Area1
		
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 10
endp FillArea

proc FillHEKEF
	push ax
	push bx
	push cx
	push dx
	push bp
	mov bp, sp
	mov al,[bp+12]
	mov cx,200
	Area_1:
	push cx
	dec cx
	cmp cx, [bp+18]
	jg y_Greater
	cmp cx, [bp+14]
	jge y_Correct
	jmp y_Incorrect
	y_Greater:
	je y_Correct
	cmp cx,[bp+14]
	jle y_Correct
	jmp y_Incorrect
	y_Correct:
	mov dx, cx
	mov cx, 320
	Area_2:
	push cx
	dec cx
	cmp cx, [bp+20]
	je x_Correct
	jg x_Greater
	cmp cx, [bp+16]
	jge x_Correct
	jmp x_Incorrect
	x_Greater:
	je x_Correct
	cmp cx,[bp+16]
	jle x_Correct
	jmp x_Incorrect
	x_Correct:
	cmp cx, [bp+16];abc
	je equal;abc
	cmp cx, [bp+20];abc
	je equal;abc
	cmp dx, [bp+18];abc
	je equal;abc
	cmp dx, [bp+14];abc
	je equal;abcabc
	jmp notEqual;abc
	equal:;abc
	mov ah, 0Ch
	int 10h
	notEqual:;abc
	x_Incorrect:
	pop cx
	loop Area_2
	y_Incorrect:
	pop cx
	loop Area_1
		
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 10
endp FillHEKEF

	
proc create
	push bp
	mov bp, sp
	push bx
	push cx
	push si
	mov cx, [bp+4]
	xor si, si
	
	printDotInArr:
	
	push cx
	mov bx, [bp+10]
	mov cx, [bx+si]
	mov bx, [bp+8]
	mov dx, [bx+si]
	mov bx, [bp+6]
	
	mov al, [byte ptr bx+si]
	mov ah, 0Ch
	int 10h
	
	pop cx
	add si, 2
	
	loop printDotInArr
	
	pop si
	pop cx
	pop bx
	pop bp
	ret 8
endp create

proc createGhost
	push bp
	mov bp, sp
	push bx
	push cx
	push si
	mov cx, [bp+4]
	xor si, si
	
	printDotInArr2:
	
	push cx
	mov bx, [bp+10]
	mov cx, [bx+si]
	mov bx, [bp+8]
	mov dx, [bx+si]
	mov ah, 0Dh
	int 10h
	cmp al, 15
	je dontDraw
	mov bx, [bp+6]
	mov al, [byte ptr bx+si]
	mov ah, 0Ch
	int 10h
	dontDraw:
	
	pop cx
	add si, 2
	
	loop printDotInArr2
	
	pop si
	pop cx
	pop bx
	pop bp
	ret 8
endp createGhost

proc subNfromArray ;4 inputs 1.offset of original arr 2. offset of arr to save to 3. length of arrs 4. number to subtract
		;for every arr1[i] it save in arr2[i] = arr[i]-num
        push bp
        mov bp, sp
        push ax
		push bx
		push cx
		push dx
		mov bx, [bp + 10]
        mov dx, [bp + 8]
        mov cx, [bp + 6]
        mov al, [bp + 4]
    add_N:
            push bx
			push cx
			mov bl, [bx]
			sub bl, al
			mov cl, bl
			mov bx, dx
			mov [bx], cl
			pop cx
			pop bx
			add bx, 2
            add dx, 2
        loop add_N
        pop dx
		pop cx
		pop bx
		pop ax
		pop bp
		ret 8
endp subNfromArray



proc createFrame
	push 0
	call fillScreen
	
	push 10
	push 10
	push 260
	push 10
	push 3
	call fillArea
	
	push 10
	push 190
	push 260
	push 190
	push 3
	call fillArea
	
	push 10
	push 10
	push 10
	push 190
	push 3
	call fillArea
	
	push 260
	push 10
	push 260
	push 190
	push 3
	call fillArea
	
	push 15
	push 15
	push 255
	push 15
	push 3
	call fillArea

	push 15
	push 185
	push 255
	push 185
	push 3
	call fillArea
	
	push 15
	push 15
	push 15
	push 185
	push 3
	call fillArea
	
	push 255
	push 15
	push 255
	push 185
	push 3
	call fillArea
	ret
endp createFrame

proc Ghosts
; print all the ghosts
	push offset xRedGhost
	push offset yRedGhost
	push offset colorRedGhost
	push 144
	call create
	
	push offset xPinkGhost
	push offset yPinkGhost
	push offset colorPinkGhost
	push 144
	call create
	
	push offset xBlueGhost
	push offset yBlueGhost
	push offset colorBlueGhost
	push 144
	call create
	
	push offset xOrangeGhost
	push offset yOrangeGhost
	push offset colorOrangeGhost
	push 144
	call create
	ret
endp Ghosts

proc createBlocks
	push 35
	push 32
	push 56
	push 40
	push 3
	call FillHEKEF
	push 35
	push 32
	push 56
	push 32
	push 3
	call FillArea
	
	push 75
	push 32
	push 108
	push 40
	push 3
	call FillHEKEF
	push 75
	push 32
	push 108
	push 32
	push 3
	call FillArea
	
	push 127
	push 15
	push 133
	push 40
	push 3
	call FillHEKEF
	push 127
	push 15
	push 127
	push 40
	push 3
	call FillArea
	
	push 152
	push 32
	push 192
	push 40
	push 3
	call FillHEKEF
	push 152
	push 32
	push 192
	push 32
	push 3
	call FillArea
	
	push 211
	push 32
	push 236
	push 40
	push 3
	call FillHEKEF
	push 211
	push 32
	push 236
	push 32
	push 3
	call FillArea
	
	push 211
	push 57
	push 236
	push 60
	push 3
	call FillHEKEF
	push 211
	push 57
	push 236
	push 57
	push 3
	call FillArea
	
	push 107
	push 57
	push 157
	push 60
	push 3
	call FillHEKEF
	push 107
	push 57
	push 157
	push 57
	push 3
	call FillArea
	push 127
	push 60
	push 137
	push 70
	push 3
	call FillHEKEF
	push 127
	push 70
	push 137
	push 70
	push 3
	call FillArea
	push 127
	push 60
	push 137
	push 60
	push 0
	call FillArea
	
	push 33
	push 57
	push 56
	push 60
	push 3
	call FillHEKEF
	push 33
	push 57
	push 56
	push 57
	push 3
	call FillArea
	
	push 75
	push 57
	push 80
	push 87
	push 3
	call FillHEKEF
	push 75
	push 57
	push 80
	push 57
	push 3
	call FillArea
	push 80
	push 70
	push 92
	push 73
	push 3
	call FillHEKEF
	push 80
	push 70
	push 92
	push 70
	push 3
	call FillArea
	push 80
	push 70
	push 80
	push 73
	push 0
	call FillArea
	
	push 184
	push 57
	push 189
	push 90
	push 3
	call FillHEKEF
	push 184
	push 57
	push 189
	push 57
	push 3
	call FillArea
	push 172
	push 70
	push 184
	push 76
	push 3
	call FillHEKEF
	push 172
	push 70
	push 184
	push 70
	push 3
	call FillArea
	push 184
	push 70
	push 184
	push 73
	push 0
	call FillArea
 
	push 97
	push 96
	push 167
	push 116
	push 3
	call FillHEKEF
	push 97
	push 96
	push 167
	push 96
	push 3
	call FillArea	
	push 100
	push 98
	push 164
	push 113
	push 3
	call FillHEKEF
	push 100
	push 98
	push 164
	push 98
	push 3
	call FillArea
	push 120
	push 94
	push 144
	push 98
	push 0
	call FillArea
	
	push 184
	push 115
	push 189
	push 135
	push 3
	call FillHEKEF
	push 184
	push 115
	push 189
	push 115
	push 3
	call FillHEKEF
	
	push 75
	push 115
	push 80
	push 135
	push 3
	call FillHEKEF
	push 75
	push 115
	push 80
	push 115
	push 3
	call FillHEKEF
 
	push 107
	push 135
	push 157
	push 138
	push 3
	call FillHEKEF
	push 107
	push 135
	push 157
	push 135
	push 3
	call FillArea
	push 127
	push 138
	push 137
	push 148
	push 3
	call FillHEKEF
	push 127
	push 148
	push 137
	push 148
	push 3
	call FillArea
	push 127
	push 138
	push 137
	push 138
	push 0
	call FillArea
	
	push 155
	push 155
	push 198
	push 160
	push 3
	call FillHEKEF
	push 155
	push 155
	push 198
	push 155
	push 3
	call FillArea
	
	push 64
	push 155
	push 107
	push 160
	push 3
	call FillHEKEF
	push 64
	push 155
	push 107
	push 155
	push 3
	call FillArea
 
	push 208
	push 115
	push 236
	push 122
	push 3
	call FillHEKEF
	push 208
	push 115
	push 236
	push 115
	push 3
	call FillArea
	push 208
	push 122
	push 215
	push 140
	push 3
	call FillHEKEF
	push 209
	push 122
	push 215
	push 122
	push 0
	call FillHEKEF
	
	push 31
	push 113
	push 59
	push 120
	push 3
	call FillHEKEF
	push 31
	push 113
	push 59
	push 113
	push 3
	call FillArea
	push 52
	push 120
	push 59
	push 138
	push 3
	call FillHEKEF
	push 52
	push 120
	push 58
	push 120
	push 0
	call FillHEKEF
	
	push 15
	push 81
	push 50
	push 89
	push 3
	call FillHEKEF
	push 15
	push 81
	push 50
	push 81
	push 3
	call FillHEKEF
	
	push 220
	push 81
	push 255
	push 89
	push 3
	call FillHEKEF
	push 220
	push 81
	push 255
	push 81
	push 3
	call FillHEKEF
	 
	push 35
	push 150
	push 38
	push 165
	push 3
	call FillHEKEF
	push 35
	push 150
	push 38
	push 150
	push 3
	call FillHEKEF
	
	push 230
	push 150
	push 233
	push 165
	push 3
	call FillHEKEF
	push 230
	push 150
	push 233
	push 150
	push 3
	call FillHEKEF
	
	push 127
	push 165
	push 137
	push 167
	push 3
	call FillHEKEF
	push 127
	push 165
	push 137
	push 165
	push 3
	call FillHEKEF
	ret
endp createBlocks

proc createBoard
	call createFrame
	;call ghosts
	push offset xDot
	push offset yDot
	push offset colorDot
	push 167
	call create


	call createBlocks
	ret
endp createBoard


proc collision ;checks if packman collided with something
	push ax
	push bx
	push cx	
	push dx
	push bp
	mov bp,sp
	mov cx, [bp+12]
	CollisionLoop:
		push cx
		mov bx, [bp+14]
		add bx, cx
		add bx, cx
		sub bx, 2
		mov dx, [bx]
		mov bx, [bp+16]
		add bx, cx
		add bx, cx
		sub bx,2
		mov cx, [bx]
		mov ah, 0Dh
		int 10h
		cmp al, 0
		je noCollison
		cmp al, 15
		je addScore
		cmp al, 3
		je noexit
		jmp die  ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		noexit:
		jmp collided
		addScore:
		inc [finalScore]
		cmp [finalScore], 168
		jne go
		call win
		go:
		;je win
		;----------------------------------------
		push bx
		mov bx, offset Score
		inc [byte ptr bx+3]
		pop bx
		noCollison:
		pop cx
		loop CollisionLoop
		
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 6
endp collision

proc redGhostcollision ;checks if packman collided with something
	push ax
	push bx
	push cx	
	push dx
	push bp
	mov bp,sp
	mov cx, [bp+12]
	CollisionLoop1:
		push cx
		mov bx, [bp+14]
		add bx, cx
		add bx, cx
		sub bx, 2
		mov dx, [bx]
		mov bx, [bp+16]
		add bx, cx
		add bx, cx
		sub bx,2
		mov cx, [bx]
		mov ah, 0Dh
		int 10h
		cmp al, 3
		je nonoCollison12
		jmp noCollison1
		nonoCollison12:
		push ax
		mov ax, [xRedGhostOffsetNum]
		sub [xRedGhostOffsetTotal], ax
		mov ax, [yRedGhostOffsetNum]
		sub [yRedGhostOffsetTotal], ax
		pop ax
		mov ah, 2ch
		int 21h
		mov dh, dl
		shl dl, 7
		shr dl, 7
		shl dh, 6
		shr dh, 7
		mov [byte ptr xRedGhostOffsetNum], dh
		mov [yRedGhostOffsetNum], 1
		sub [byte ptr yRedGhostOffsetNum], dh
		cmp dl, 0
		je nominus
		neg [xRedGhostOffsetNum]
		neg [yRedGhostOffsetNum]
		nominus:
		jmp RedchangeDirection
		noCollison1:
		pop cx
		dec cx
		cmp cx, 0
		je stopLoop1
		jmp CollisionLoop1
		stopLoop1:
		cmp [counterRed],10
		jne nocounter
		mov [counterRed],0
		jmp RedchangeDirection
		nocounter:
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 6
endp redGhostcollision


proc pinkGhostcollision ;checks if packman collided with something
	push ax
	push bx
	push cx	
	push dx
	push bp
	mov bp,sp
	mov cx, [bp+12]
	CollisionLoop2:
		push cx
		mov bx, [bp+14]
		add bx, cx
		add bx, cx
		sub bx, 2
		mov dx, [bx]
		mov bx, [bp+16]
		add bx, cx
		add bx, cx
		sub bx,2
		mov cx, [bx]
		mov ah, 0Dh
		int 10h
		cmp al, 3
		je nonoCollison21
		jmp noCollison2
		nonoCollison21:
		push ax
		mov ax, [xPinkGhostOffsetNum]
		sub [xPinkGhostOffsetTotal], ax
		mov ax, [yPinkGhostOffsetNum]
		sub [yPinkGhostOffsetTotal], ax
		pop ax
		mov ah, 2ch
		int 21h
		mov dh, dl
		shl dl, 7
		shr dl, 7
		shl dh, 6
		shr dh, 7
		mov [byte ptr xPinkGhostOffsetNum], dh
		mov [yPinkGhostOffsetNum], 1
		sub [byte ptr yPinkGhostOffsetNum], dh
		cmp dl, 0
		je nominus1
		neg [xPinkGhostOffsetNum]
		neg [yPinkGhostOffsetNum]
		nominus1:
		jmp PinkchangeDirection
		noCollison2:
		pop cx
		dec cx
		cmp cx, 0
		je stopLoop2
		jmp CollisionLoop2
		stopLoop2:
		cmp [counterPink],10
		jne nocounter1
		mov [counterPink],0
		jmp PinkchangeDirection
		nocounter1:
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 6
endp pinkGhostcollision

proc BlueGhostcollision ;checks if packman collided with something
	push ax
	push bx
	push cx	
	push dx
	push bp
	mov bp,sp
	mov cx, [bp+12]
	CollisionLoop3:
		push cx
		mov bx, [bp+14]
		add bx, cx
		add bx, cx
		sub bx, 2
		mov dx, [bx]
		mov bx, [bp+16]
		add bx, cx
		add bx, cx
		sub bx,2
		mov cx, [bx]
		mov ah, 0Dh
		int 10h
		cmp al, 3
		je nonoCollison22
		jmp noCollison3
		nonoCollison22:
		push ax
		mov ax, [xBlueGhostOffsetNum]
		sub [xBlueGhostOffsetTotal], ax
		mov ax, [yBlueGhostOffsetNum]
		sub [yBlueGhostOffsetTotal], ax
		pop ax
		mov ah, 2ch
		int 21h
		mov dh, dl
		shl dl, 7
		shr dl, 7
		shl dh, 6
		shr dh, 7
		mov [byte ptr xBlueGhostOffsetNum], dh
		mov [yBlueGhostOffsetNum], 1
		sub [byte ptr yBlueGhostOffsetNum], dh
		cmp dl, 0
		je nominus2
		neg [xBlueGhostOffsetNum]
		neg [yBlueGhostOffsetNum]
		nominus2:
		jmp BluechangeDirection
		noCollison3:
		pop cx
		dec cx
		cmp cx, 0
		je stopLoop3
		jmp CollisionLoop3
		stopLoop3:
		cmp [counterBlue],10
		jne nocounter2
		mov [counterBlue],0
		jmp BluechangeDirection
		nocounter2:
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 6
endp BlueGhostcollision
	
proc OrangeGhostcollision ;checks if packman collided with something
	push ax
	push bx
	push cx	
	push dx
	push bp
	mov bp,sp
	mov cx, [bp+12]
	CollisionLoop5:
		push cx
		mov bx, [bp+14]
		add bx, cx
		add bx, cx
		sub bx, 2
		mov dx, [bx]
		mov bx, [bp+16]
		add bx, cx
		add bx, cx
		sub bx,2
		mov cx, [bx]
		mov ah, 0Dh
		int 10h
		cmp al, 3
		je nonoCollison25
		jmp noCollison5
		nonoCollison25:
		push ax
		mov ax, [xOrangeGhostOffsetNum]
		sub [xOrangeGhostOffsetTotal], ax
		mov ax, [yOrangeGhostOffsetNum]
		sub [yOrangeGhostOffsetTotal], ax
		pop ax
		mov ah, 2ch
		int 21h
		mov dh, dl
		shl dl, 7
		shr dl, 7
		shl dh, 6
		shr dh, 7
		mov [byte ptr xOrangeGhostOffsetNum], dh
		mov [yOrangeGhostOffsetNum], 1
		sub [byte ptr yOrangeGhostOffsetNum], dh
		cmp dl, 0
		je nominus5
		neg [xOrangeGhostOffsetNum]
		neg [yOrangeGhostOffsetNum]
		nominus5:
		jmp OrangechangeDirection
		noCollison5:
		pop cx
		dec cx
		cmp cx, 0
		je stopLoop5
		jmp CollisionLoop5
		stopLoop5:
		cmp [counterOrange],10
		jne nocounter5
		mov [counterOrange],0
		jmp OrangechangeDirection
		nocounter5:
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	ret 6
endp OrangeGhostcollision
proc DisplayScore
	push ax
	push dx
	mov cx, 3
	Scoreloop:
	mov bx, offset Score
	add bx, cx
	cmp [byte ptr bx], ':'
	jne dontchangeScore
	mov [byte ptr bx], "0"
	inc [byte ptr bx-1]
	dontchangeScore:
	loop Scoreloop
	mov bx, offset Score
	cmp [byte ptr bx], ':'
	jne nomax
	mov [byte ptr bx], '0'
		nomax:
	mov bh, 0
	mov dx, 22h
	mov ah, 2
	int 10h
	mov ah, 9
	mov dx, offset Score
	int 21h
	pop dx
	pop ax
	ret
endp DisplayScore



proc Die

	
	mov ax, 13h
	int 10h	
	mov ah, 9

	mov dx, offset lostLogo
	int 21h
	mov dx, offset loseText1
	int 21h
	mov dx, offset Score
	int 21h
	mov dx, offset loseText2
	int 21h
	
	play:
	mov ah, 7
	int 21h
	cmp al, 'y'
	je reset
	cmp al, 'Y'
	je reset
	cmp al, 'n'
	jne jmpExit
	jmp exit
	jmpExit:
	cmp al, 'N'
	jne noexit2
	jmp exit
	noexit2:
	jmp play
	
	reset:
	push offset copyXcorrectDiraction
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray
	push offset copyYcorrectDiraction
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray

	mov [xoffsetNum], 0
	mov [yoffsetNum], 0
	mov [xoffset], -15
	mov [yoffset], -17
	
	mov [collide], 0
	mov [xRedGhostOffsetTotal], 0
	mov [yRedGhostOffsetTotal], 0
	mov [xRedGhostOffsetNum], 1
	mov [yRedGhostOffsetNum], 0
	mov [counterRed], 0
	
	mov [xPinkGhostOffsetTotal], 0
	mov [yPinkGhostOffsetTotal], 0
	mov [xPinkGhostOffsetNum], 1
	mov [yPinkGhostOffsetNum], 0
	mov [counterPink], 0
	
	mov [xBlueGhostOffsetTotal], 0
	mov [yBlueGhostOffsetTotal], 0
	mov [xBlueGhostOffsetNum], 1
	mov [yBlueGhostOffsetNum], 0
	mov [counterBlue], 0
	
	mov [xOrangeGhostOffsetTotal], 0
	mov [yOrangeGhostOffsetTotal], 0
	mov [xOrangeGhostOffsetNum], 1
	mov [yOrangeGhostOffsetNum], 0
	mov [counterOrange], 0
	
	mov [finalScore], 0
	mov cx, 4
	Score0:
	mov bx, offset Score
	add bx, cx
	dec bx
	mov [byte ptr bx], '0'
	loop Score0
	mov ax, 13h
	int 10h
	jmp startOver
	ret
endp Die

proc win
mov ax, 13h
	int 10h	
	mov ah, 9

	mov dx, offset winLogo
	int 21h
	mov dx, offset winScreenMessage
	int 21h
	mov dx, offset loseText2
	int 21h

	
	play1:
	mov ah, 7
	int 21h
	cmp al, 'y'
	je reset1
	cmp al, 'Y'
	je reset1
	cmp al, 'n'
	jne jmpExit1
	jmp exit
	jmpExit1:
	cmp al, 'N'
	jne noexit3
	jmp exit
	noexit3:
	jmp play1
	
	reset1:
	push offset copyXcorrectDiraction
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray
	push offset copyYcorrectDiraction
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray

	mov [xoffsetNum], 0
	mov [yoffsetNum], 0
	mov [xoffset], -15
	mov [yoffset], -17
	
	mov [collide], 0
	mov [xRedGhostOffsetTotal], 0
	mov [yRedGhostOffsetTotal], 0
	mov [xRedGhostOffsetNum], 1
	mov [yRedGhostOffsetNum], 0
	mov [counterRed], 0
	
	mov [xPinkGhostOffsetTotal], 0
	mov [yPinkGhostOffsetTotal], 0
	mov [xPinkGhostOffsetNum], 1
	mov [yPinkGhostOffsetNum], 0
	mov [counterPink], 0
	mov [finalScore], 0

	mov [xBlueGhostOffsetTotal], 0
	mov [yBlueGhostOffsetTotal], 0
	mov [xBlueGhostOffsetNum], 1
	mov [yBlueGhostOffsetNum], 0
	mov [counterBlue], 0
	
	mov [xOrangeGhostOffsetTotal], 0
	mov [yOrangeGhostOffsetTotal], 0
	mov [xOrangeGhostOffsetNum], 1
	mov [yOrangeGhostOffsetNum], 0
	mov [counterOrange], 0
	
	
	mov cx, 4
	Score1:
	mov bx, offset Score
	add bx, cx
	dec bx
	mov [byte ptr bx], '0'
	loop Score1
	mov ax, 13h
	int 10h
	jmp startOver
	ret
endp win

start:

	mov ax, @data
	mov ds, ax
	startOver:

	mov ax,13h
	int 10h
	mov ax, 2
	int 10h
	call startScreen
	mov ax, 13h
	int 10h
	push 0
	call fillScreen


	call createBoard
	

	LI:

	xor ax,ax
	mov ah, 0bh
	int 21h
	cmp al, 0FFh
	jne stopNoPress
	
	mov ah, 7
	int 21h
	
	cmp al,87
	je upPress
	cmp al, 119
	je upPress
	
	cmp al, 68
	je stopRightPress
	cmp al, 100
	je stopRightPress
	
	cmp al, 83
	je stopDownPress
	cmp al, 115
	je stopDownPress
	
	cmp al, 65
	je stopLeftPress
	cmp al, 97
	je stopLeftPress
	
	jmp noPress
stopNoPress:
	jmp noPress
stopDownPress:
	jmp downPress
stopRightPress: 
	jmp rightPress
stopLeftPress:
	jmp leftPress
	
	upPress:
	push offset xUp
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray

	push offset yUp
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray
	
	mov [xoffsetNum], 0
	mov [yoffsetNum], 1
	jmp noPress
	
	
	rightPress:
	push offset x
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray

	push offset y
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray
	mov [xoffsetNum], 1
	mov [yoffsetNum], 0
	jmp noPress
	
	leftPress:
	push offset xleft
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray

	push offset yleft
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray
	mov [xoffsetNum], -1
	mov [yoffsetNum], 0
	jmp noPress
	
	downPress:
	
	push offset xDown
	push offset XcorrectDiraction
	push 165
	push 0
	call subNfromArray

	push offset yDown
	push offset YcorrectDiraction
	push 165
	push 0
	call subNfromArray
	mov [xoffsetNum], 0
	mov [yoffsetNum], -1
	jmp noPress
	
	noPress:
	push ax
	mov ax, [xoffsetNum]
	add [xoffset], ax
	mov ax, [yoffsetNum]
	add [yoffset], ax
	
	
	pop ax
	push offset xRedGhostOffset
	push offset yRedGhostOffset
	push offset pacmanBlack
	push 144
	call createGhost
	
	push offset xPinkGhostOffset
	push offset yPinkGhostOffset
	push offset pacmanBlack
	push 144
	call createGhost
	
	push offset xBlueGhostOffset
	push offset yBlueGhostOffset
	push offset pacmanBlack
	push 144
	call createGhost
	
	push offset xOrangeGhostOffset
	push offset yOrangeGhostOffset
	push offset pacmanBlack
	push 144
	call createGhost

	push offset PacmanXoffset
	push offset PacmanYoffset
	push offset pacmanBlack
	push 165  
	call create
	
	push offset XcorrectDiraction
	push offset PacmanXoffset
	push 165
	neg [xoffset]
	push [xoffset]
	call subNfromArray
	neg [xoffset]
	push offset YcorrectDiraction
	push offset PacmanYoffset
	push 165
	push [yoffset]
	call subNfromArray
	
	RedchangeDirection:
	push ax
	mov ax, [xRedGhostOffsetNum]
	add [xRedGhostOffsetTotal], ax
	mov ax, [yRedGhostOffsetNum]
	add [yRedGhostOffsetTotal], ax
	pop ax
	push offset xRedGhost
	push offset xRedGhostOffset
	push 144
	neg [xRedGhostOffsetTotal]
	push [xRedGhostOffsetTotal]
	call subNfromArray
	neg [xRedGhostOffsetTotal]
	push offset yRedGhost
	push offset yRedGhostOffset
	push 144
	push [yRedGhostOffsetTotal]
	call subNfromArray
	push offset xRedGhostOffset	
	push offset yRedGhostOffset
	push 144
	call redGhostcollision
	push offset xRedGhostOffset	
	push offset yRedGhostOffset
	push offset colorRedGhost
	push 144
	call createGhost
	inc [counterRed]
	
	PinkchangeDirection:
	push ax
	mov ax, [xPinkGhostOffsetNum]
	add [xPinkGhostOffsetTotal], ax
	mov ax, [yPinkGhostOffsetNum]
	add [yPinkGhostOffsetTotal], ax
	pop ax
	push offset xPinkGhost
	push offset xPinkGhostOffset
	push 144
	neg [xPinkGhostOffsetTotal]
	push [xPinkGhostOffsetTotal]
	call subNfromArray
	neg [xPinkGhostOffsetTotal]
	push offset yPinkGhost
	push offset yPinkGhostOffset
	push 144
	push [yPinkGhostOffsetTotal]
	call subNfromArray
	push offset xPinkGhostOffset	
	push offset yPinkGhostOffset
	push 144
	call pinkGhostcollision
	push offset xPinkGhostOffset	
	push offset yPinkGhostOffset
	push offset colorPinkGhost
	push 144
	call createGhost
	inc [counterRed]
	
	BluechangeDirection:
	push ax
	mov ax, [xBlueGhostOffsetNum]
	add [xBlueGhostOffsetTotal], ax
	mov ax, [yBlueGhostOffsetNum]
	add [yBlueGhostOffsetTotal], ax
	pop ax
	push offset xBlueGhost
	push offset xBlueGhostOffset
	push 144
	neg [xBlueGhostOffsetTotal]
	push [xBlueGhostOffsetTotal]
	call subNfromArray
	neg [xBlueGhostOffsetTotal]
	push offset yBlueGhost
	push offset yBlueGhostOffset
	push 144
	push [yBlueGhostOffsetTotal]
	call subNfromArray
	push offset xBlueGhostOffset	
	push offset yBlueGhostOffset
	push 144
	call BlueGhostcollision
	push offset xBlueGhostOffset	
	push offset yBlueGhostOffset
	push offset colorBlueGhost
	push 144
	call createGhost
	inc [counterBlue]
	
	OrangechangeDirection:
	push ax
	mov ax, [xOrangeGhostOffsetNum]
	add [xOrangeGhostOffsetTotal], ax
	mov ax, [yOrangeGhostOffsetNum]
	add [yOrangeGhostOffsetTotal], ax
	pop ax
	push offset xOrangeGhost
	push offset xOrangeGhostOffset
	push 144
	neg [xOrangeGhostOffsetTotal]
	push [xOrangeGhostOffsetTotal]
	call subNfromArray
	neg [xOrangeGhostOffsetTotal]
	push offset yOrangeGhost
	push offset yOrangeGhostOffset
	push 144
	push [yOrangeGhostOffsetTotal]
	call subNfromArray
	push offset xOrangeGhostOffset	
	push offset yOrangeGhostOffset
	push 144
	call OrangeGhostcollision
	push offset xOrangeGhostOffset	
	push offset yOrangeGhostOffset
	push offset colorOrangeGhost
	push 144
	call createGhost
	inc [counterRed]
	
	push offset PacmanXoffset
	push offset PacmanYoffset
	push 165
	call collision
	push offset PacmanXoffset
	push offset PacmanYoffset
	push offset colorcorrectDiraction
	push 165  
	call create
	jmp cont
	collided:
	push ax
	mov ax, [xoffsetNum]
	sub [xoffset], ax
	mov ax, [yoffsetNum]
	sub [yoffset], ax
	pop ax
	push offset XcorrectDiraction
	push offset PacmanXoffset
	push 165
	neg [xoffset]
	push [xoffset]
	call subNfromArray
	neg [xoffset]
	push offset YcorrectDiraction
	push offset PacmanYoffset
	push 165
	push [yoffset]
	call subNfromArray
	push offset PacmanXoffset
	push offset PacmanYoffset
	push offset colorcorrectDiraction
	push 165  
	call create
	
	cont:
	mov cx, 0
	mov dx, 04000h
	mov ah, 86h
	mov al, 0
	int 15h
	call DisplayScore
	jmp LI
exit:
	push 0
	call fillScreen
;call die
;	push 0
;	call fillScreen
;	mov dx, offset lostLogo
;	mov ah,09h
;	int 21h
;	
;	mov dx, offset endingScreenMessage
;	mov ah,09h
;	int 21h
;	mov ah,0
	;int 16h

	mov ax, 4c00h
	int 21h
END start
